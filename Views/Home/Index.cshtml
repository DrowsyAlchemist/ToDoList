@using ToDoList.Models
@using ToDoList.ViewModels
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@addTagHelper *, ToDoList
@model IndexViewModel

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" />

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>ToDoList</title>
</head>
<body>
    @if (Model.UserViewModel.IsAdminMode)
    {
        <div>
            <a href="/Admin/Index">Admin Page</a>
        </div>

        @if (Model.UserViewModel.IsUserTasksOwner == false)
        {
            <div style="padding: 10px">
                <h2>Admin mode</h2>
                <hr />
                <h3>Tasks for user:</h3>
                <span>
                    Id: @(Model.UserViewModel.UserId)@("\n")
                </span>
                <br />
                <span>
                    Name: @(Model.UserViewModel.Name)@("\n")
                </span>
                <br />
                <span>
                    Email: @(Model.UserViewModel.Email)@("\n")
                </span>
                <br />
            </div>
        }
    }

    <div style="margin-bottom:20px">
        <h2 style="display: inline">To Do List</h2>
        @if (Model.UserViewModel.IsUserTasksOwner)
        {
            <span style="margin-left: 20px"><a href="/Task/CreateTask">Add</a></span>
        }
    </div>

    @{
        await Html.RenderPartialAsync("ViewTasks", Model);
    };

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/notificationHub")
            .configureLogging(signalR.LogLevel.Information)
            .build();

        // Подключаемся к хабу
        connection.start()
            .then(() => {
                console.log("SignalR Connected"); })
            .catch(err => console.error(err.toString()));

        // Обработчик уведомлений
       const receivedNotifications = new Set();

connection.on("ReceiveNotification", (message, taskId) => {
    console.log("ReceiveNotification");

    if (!receivedNotifications.has(taskId)) {
        receivedNotifications.add(taskId);

        // Вариант 1: Браузерные уведомления
        if (Notification.permission === "granted") {
            new Notification("Напоминание", { body: message });
        } else if (Notification.permission !== "denied") {
            Notification.requestPermission().then(permission => {
                if (permission === "granted") {
                    new Notification("Напоминание", { body: message }); // Было "Напоминание" (с ошибкой)
                }
            });
        } else {
            console.log("denied");
        }

        // Вариант 2: Toast-уведомление (раскомментируйте, если нужно)
        // toastr.info(message, 'Новое уведомление', {
        //     onclick: () => window.location.href = '/Tasks/Details/' + taskId
        // });

        // Вариант 3: alert (раскомментируйте, если нужно)
        // alert(message);

        // Очистка через время (например, 1 час)
        setTimeout(() => receivedNotifications.delete(taskId), 3600000);
    }
});

        // Обработка ошибок подключения
        connection.onclose(async () => {
            await startConnection();
        });

        async function startConnection() {
            try {
                await connection.start();
                console.log("SignalR connection established");
            } catch (err) {
                console.log(err);
                setTimeout(() => startConnection(), 5000);
            }
        }
    });

    setInterval(() => {
    connection.invoke("Ping");
}, 30000);
</script>
</body>
</html>